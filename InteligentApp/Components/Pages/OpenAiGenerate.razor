@page "/openai-generate"

<h3>Generowanie tekstu od GPT-4</h3>

<p>Wpisz poniżej prompt (pytanie lub polecenie), a następnie kliknij przycisk, aby wygenerować odpowiedź od modelu GPT-4</p>

<div class="mb-3">
    <label for="promptInput" class="form-label">Prompt:</label>
    <textarea id="promptInput" class="form-control" rows="3" @bind="_userPropmt"></textarea>
</div>

<button class="btn btn-primary" @onclick="GenerateText">Generuj tekst</button>

@if (_isLoading)
{
    <p class="mt-3">Proszę poczekać, generuję odpowiedź...</p>
}
else if (!string.IsNullOrWhiteSpace(_generatedTekst))
{
    <div>
        <h4>Wynik:</h4>
        <p>@_generatedTekst</p>
    </div>
}

@code {
    private string _userPropmt = string.Empty;
    private string _generatedTekst = string.Empty;
    private bool _isLoading = false;

    [Inject]
    public IHttpClientFactory HttpClientFactory { get; set; }

    private async Task GenerateText()
    {
        if (string.IsNullOrWhiteSpace(_userPropmt))
        {
            _generatedTekst = "Proszę wpisać prompt.";
            return;
        }

        _isLoading = true;
        _generatedTekst = string.Empty;

        _generatedTekst = await AskOpenAi(_userPropmt);
        _isLoading = false;
    }

    private async Task<string> AskOpenAi(string userPrompt)
    {
        try
        {
            var client = HttpClientFactory.CreateClient("OpenAI");

            var reuestBody = new
            {
                model = "gpt-4",
                messages = new[]
                {
                    new { role = "system", content = "Jesteś pomocnym asystentem." },
                    new { role = "user", content = userPrompt }
                },
                max_tokens = 500,
                temperature = 0.7
            };

            using var resopnse = await client.PostAsJsonAsync("", reuestBody);

            if (!resopnse.IsSuccessStatusCode)
            {
                return $"Error: {resopnse.StatusCode}, Przepraszam ale nie udało mi sie uzyskać odpowiedzi od AI";
            }

            var jsonResponse = await resopnse.Content.ReadFromJsonAsync<ChatCompletionResponse>();
            var answer = jsonResponse?.Choices?.FirstOrDefault()?.Message?.Content.Trim();
            return answer ?? "Przepraszam ale nie udało mi sie uzyskać odpowiedzi od AI";
        }
        catch (Exception ex)
        {
            return $"Wystąpił błąd: {ex.Message}";
        }
    }
}
